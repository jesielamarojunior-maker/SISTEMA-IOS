#!/usr/bin/env python3
"""
üîç SCRIPT PARA VERIFICAR E LIMPAR USU√ÅRIOS DUPLICADOS
Conecta diretamente no MongoDB para resolver conflitos de email
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv('backend/.env')

MONGO_URL = os.environ.get('MONGO_URL', 'mongodb+srv://jesielamarojunior_db_user:admin123@cluster0.vuho6l7.mongodb.net/IOS-SISTEMA-CHAMADA?retryWrites=true&w=majority')
DB_NAME = os.environ.get('DB_NAME', 'IOS-SISTEMA-CHAMADA')

async def check_and_fix_users():
    """Verificar e corrigir problemas com usu√°rios"""
    try:
        print("üîå Conectando ao MongoDB...")
        client = AsyncIOMotorClient(MONGO_URL)
        db = client[DB_NAME]
        
        # Testar conex√£o
        await client.admin.command('ping')
        print("‚úÖ Conectado ao MongoDB!")
        
        # Listar todos os usu√°rios
        print(f"\nüë• USU√ÅRIOS EXISTENTES:")
        usuarios = await db.usuarios.find({}).to_list(100)
        
        emails_vistos = set()
        duplicados = []
        
        for i, user in enumerate(usuarios, 1):
            email = user.get('email', 'N/A')
            nome = user.get('nome', 'N/A')
            tipo = user.get('tipo', 'N/A')
            id_user = user.get('id', user.get('_id', 'N/A'))
            
            print(f"   {i}. {nome} ({email}) - {tipo} - ID: {id_user}")
            
            if email in emails_vistos:
                duplicados.append(user)
                print(f"      ‚ö†Ô∏è  DUPLICADO ENCONTRADO!")
            else:
                emails_vistos.add(email)
        
        if duplicados:
            print(f"\nüö® ENCONTRADOS {len(duplicados)} USU√ÅRIOS DUPLICADOS:")
            for dup in duplicados:
                print(f"   ‚Ä¢ {dup.get('nome')} ({dup.get('email')})")
                
            print(f"\nüóëÔ∏è  REMOVENDO DUPLICADOS...")
            for dup in duplicados:
                await db.usuarios.delete_one({"_id": dup["_id"]})
                print(f"   ‚úÖ Removido: {dup.get('nome')} ({dup.get('email')})")
        
        # Verificar se o email 'ione.almeida@ios.org.br' existe
        email_procurado = "ione.almeida@ios.org.br"
        usuario_existente = await db.usuarios.find_one({"email": email_procurado})
        
        if usuario_existente:
            print(f"\n‚ö†Ô∏è  USU√ÅRIO COM EMAIL {email_procurado} J√Å EXISTS:")
            print(f"   Nome: {usuario_existente.get('nome')}")
            print(f"   Tipo: {usuario_existente.get('tipo')}")
            print(f"   ID: {usuario_existente.get('id')}")
            
            resposta = input(f"\n‚ùì Deseja remover este usu√°rio para permitir o novo cadastro? (s/n): ")
            if resposta.lower() in ['s', 'sim', 'y', 'yes']:
                await db.usuarios.delete_one({"email": email_procurado})
                print(f"‚úÖ Usu√°rio {email_procurado} removido!")
            else:
                print(f"‚ùå Usu√°rio mantido. Use um email diferente.")
        else:
            print(f"\n‚úÖ Email {email_procurado} est√° livre para uso!")
        
        # Contar usu√°rios finais
        total_usuarios = await db.usuarios.count_documents({})
        print(f"\nüìä TOTAL DE USU√ÅRIOS NO SISTEMA: {total_usuarios}")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    asyncio.run(check_and_fix_users())